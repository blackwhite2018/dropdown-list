{"version":3,"sources":["components/Dropdown/Item/Item.jsx","components/Dropdown/Dropdown.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Item","item","href","text","actived","className","Dropdown","useState","opened","setOpened","items","data-id","onClick","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uKAmBeA,EAhBF,SAAC,GAAD,QAAEC,KAAQC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,KAAQC,EAAxB,EAAwBA,QAAxB,OACT,wBAAIC,UAAYD,EAAU,SAAW,IACjC,uBAAGF,KAAOA,GAASC,KCwDZG,EA1DE,WAAO,IAAD,EACSC,oBAAS,GADlB,mBACZC,EADY,KACJC,EADI,OAEOF,mBAAS,CAC/B,CACIJ,KAAM,sBACND,KAAM,KAEV,CACIC,KAAM,kBACND,KAAM,KAEV,CACIC,KAAM,aACND,KAAM,KAEV,CACIC,KAAM,OACND,KAAM,KAEV,CACIC,KAAM,UACND,KAAM,KAEV,CACIC,KAAM,sBACND,KAAM,OAzBK,mBAEZQ,EAFY,aA4BWH,mBAAS,wBA5BpB,mBA4BZH,EA5BY,UAkCnB,OACI,oCACI,yBAAKO,UAAQ,UAAUN,UAAS,2BAAuBG,EAAS,GAAK,SACrE,4BAAQG,UAAQ,SAASN,UAAU,MAAMO,QAP9B,WACfH,GAAWD,KAOH,kDACA,uBAAGH,UAAU,kBAAb,WAEJ,wBAAIM,UAAQ,WAAWN,UAAU,YAEzBK,EAAMG,KAAI,SAACZ,EAAMa,GAAP,OACF,kBAAC,EAAD,CACIb,KAAOA,EACPG,QAAUA,IAAYH,EAAKE,KAC3BY,IAAMD,WCtCvBE,G,KARH,WACR,OACI,yBAAKX,UAAU,aACX,kBAAC,EAAD,SCKQY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1bc762bb.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Item = ({item: { href, text }, actived}) => (\r\n    <li className={ actived ? 'active' : '' }>\r\n        <a href={ href }>{ text }</a>\r\n    </li>\r\n);\r\n\r\nItem.propTypes = {\r\n    props: PropTypes.shape({\r\n        item: PropTypes.shape({\r\n            href: PropTypes.string.isRequired,\r\n            text: PropTypes.string.isRequired\r\n        }),\r\n        actived: PropTypes.bool\r\n    })\r\n};\r\n\r\nexport default Item;\r\n\r\n","import React, { useState } from 'react';\r\nimport Item from './Item/Item';\r\n\r\nconst Dropdown = () => {\r\n    const [opened, setOpened] = useState(true);\r\n    const [items, setItems] = useState([\r\n        {\r\n            text: 'Profile Information',\r\n            href: '#'\r\n        },\r\n        {\r\n            text: 'Change Password',\r\n            href: '#'\r\n        },\r\n        {\r\n            text: 'Become PRO',\r\n            href: '#'\r\n        },\r\n        {\r\n            text: 'Help',\r\n            href: '#'\r\n        },\r\n        {\r\n            text: 'Log Out',\r\n            href: '#'\r\n        },\r\n        {\r\n            text: 'Profile Information',\r\n            href: '#'\r\n        }\r\n    ]);\r\n    const [actived, setActived] = useState('Profile Information');\r\n\r\n    const toggleOpen = () => {\r\n        setOpened(!opened);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div data-id=\"wrapper\" className={ `dropdown-wrapper ${opened ? '' : 'open'}` }>\r\n            <button data-id=\"toggle\" className=\"btn\" onClick={ toggleOpen }>\r\n                <span>Account Settings</span>\r\n                <i className=\"material-icons\">public</i>\r\n            </button>\r\n            <ul data-id=\"dropdown\" className=\"dropdown\">\r\n                {\r\n                    items.map((item, index) => (\r\n                            <Item\r\n                                item={ item }\r\n                                actived={ actived === item.text ? true : false }\r\n                                key={ index }\r\n                            />\r\n                        )\r\n                    )\r\n                }\r\n            </ul>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Dropdown;\r\n\r\n","import React from 'react';\r\nimport Dropdown from './components/Dropdown/Dropdown';\r\nimport './css/main.css';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <Dropdown />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}